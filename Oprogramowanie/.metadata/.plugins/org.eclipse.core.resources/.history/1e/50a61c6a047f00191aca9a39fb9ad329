/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define L1 	5		//Wysokosc podstawy
#define L2 	8.2		//Dlugosc pierwszego czlonu
#define L3 	7.7		//Dlugosc drugiego czlonu
#define L4 	4		//Dlugosc miedzy przegubem, a osia serwa od chwytaka
#define L5 	2.1		//Obnizenie na chwytaku
#define L6 	6		//Dlugosc miedzy osia serwa chwytaka, a punktem chwytu

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t Czas = 0;


//Zmienne bluetooth
char rx_data= '0';
char tx_data[32];
volatile int bt_rx, bt_tx;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


/*int _write(int file, char *ptr, int len){
	HAL_UART_Transmit(&huart1 , ptr, len, 50);
	return len;
}
char BTEcho(void)
{
	bt_rx= 0;
	HAL_UART_Receive_IT(&huart1,(unsigned char*)&rx_data,1);
	while(!bt_rx);
	bt_tx= 0;
	HAL_UART_Transmit_IT(&huart1,(unsigned char*)&rx_data,1);
	while(!bt_tx);
	return rx_data;
}

int BTPrintNoBlock(char * str)
{
	int strsize= sprintf(tx_data,str);
	if(strsize > 0)
		HAL_UART_Transmit_IT(&huart1,(unsigned char*)tx_data,strsize);
	return strsize;
}

int BTPrint(char * str)
{
	int strsize= sprintf(tx_data,str);
	if(strsize > 0)
	{
		bt_tx= 0;
		HAL_UART_Transmit_IT(&huart1,(unsigned char*)tx_data,strsize);
		while(!bt_tx);
	}
	return strsize;
}

int BTPrintInt(int liczba)
{
	char str[12];
	int strsize= sprintf(str,"%d",liczba);
	if(strsize > 0)
		return BTPrint(str);
	return strsize;
}

int BTReadInt( int * num, int min, int max )
{
	int suma= 0;
	char znak= '0';
	while(znak != '\r' && znak != '\n' && znak != 'u')
	{
		znak= BTEcho();
		if(znak == 27 || znak == 'x')return 0;
		if(znak >= '0' && znak <= '9' && suma < max)
			suma= suma*10 + znak - '0';
	}
	*num= suma > min ? suma < max ? suma : max : min;
	return 1;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	bt_rx= 1;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	bt_tx= 1;
}

int BuffComp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength)
{
	for (int i=0; i < BufferLength; ++i){
		if (pBuffer1[i] != pBuffer2[i]) return 0;
		else return 1;
	}
	return -1;
}*/

__weak void HAL_Delay(__IO uint32_t Delay)

{

	uint32_t tickstart = 0;

	tickstart = HAL_GetTick();

	while ((HAL_GetTick() - tickstart) < Delay)

	{

	}

}
//Wymyslic mechanizm pozwalajacy regulowac predkosc !!!
//Zwrocic uwage na fakt, ze jezeli ktorys z przegubow jest ustawiony np. w polowie
//to nie mozna zaczac pozycjonowac go od poczatkowej wartosci dodajac male skoki do niej,
//poniewaz spowoduje to nagly skok i dopiero potem powolne przesowanie. Trzeba pomysliec o zapamietywaniu
//obecnej pozycji serwa
uint8_t moveAlpha(uint16_t alpha, uint16_t del, uint16_t skok) {
	int pwm = 0;
	int i = 0;

	if(TIM1->CCR4 == 0)
	{
		for (; i < 1206 - skok; i += skok)
		{
			TIM1->CCR4 = i;

			HAL_Delay(del);
		}
	}

	if (alpha >= 70 && alpha <= 105)
	{
		pwm = (int) (alpha * 5.1); // przelicznik k�ta na skale pwm
		pwm += 670;
		i = TIM1->CCR4;

		// punkt poczatkowy (90stopni) to 670
	} else if (alpha >= 0 && alpha <= 70)
	{
		pwm = (int) (alpha * 5.3); // przelicznik k�ta na skale pwm
		pwm += 670;


	} else {
		return 1;
	}

	i = 0;
	if (i < pwm) {
		for (; i < pwm - skok; i += skok) {

			TIM1->CCR4 = i;

			HAL_Delay(del);

		}

	} else if (i > pwm) {
		for (; i > pwm + skok; i -= skok) {

			TIM1->CCR4 = i;

			HAL_Delay(del);
		}
	}
	TIM1->CCR4 = pwm;
	return 0;

}

uint8_t moveBeta(uint16_t beta, uint16_t del, uint16_t skok) {
	int pwm = 0;
	int i = 0;

	if(TIM1->CCR3 == 0)
	{
		for (; i < 1097 - skok; i += skok)
		{
			TIM1->CCR3 = i;

			HAL_Delay(del);
		}
	}

	if (beta > 68 && beta < 160) {
		pwm = (int) ((beta - 68) * 6.1); // przelicznik k�ta na skale pwm

	} else if (beta >= 160 && beta < 250) {
		pwm = (int) ((beta - 68) * 5.4); // przelicznik k�ta na skale pwm

	} else {
		return 1;
	}

	pwm = 1250 - pwm; // punkt poczatkowy (90stopni) to 670

	// punkt poczatkowy (90stopni) to 670
	i = 0;
	if (i < pwm) {
		for (; i < pwm; i += skok) {

			TIM1->CCR3 = i;

			HAL_Delay(del);

		}

	} else if (i > pwm) {
		for (; i > pwm; i -= skok) {

			TIM1->CCR3 = i;

			HAL_Delay(del);
		}
	}

	TIM1->CCR3 = pwm;
	return 0;

}

uint8_t moveGamma(uint16_t gamma, uint16_t del, uint16_t skok) {

	int pwm = 0;
	int i = 0;

	if(TIM1->CCR1 == 0)
	{
		for (; i < 1036 - skok; i += skok)
		{
			TIM1->CCR1 = i;

			HAL_Delay(del);
		}
	}

	if (gamma > 126 && gamma < 250) {
		pwm = (int) ((gamma - 126) * 4.25); // przelicznik k�ta na skale pwm

	} else if (gamma >= 250 && gamma < 294) {
		pwm = (int) ((gamma - 126) * 4.8); // przelicznik k�ta na skale pwm

	} else {
		return 1;
	}

	pwm += 250; // punkt poczatkowy (90stopni) to 670

	// punkt poczatkowy (90stopni) to 670
	i = 0;
	if (i < pwm) {
		for (; i < pwm - skok; i += skok) {

			TIM1->CCR1 = i;

			HAL_Delay(del);

		}

	} else if (i > pwm) {
		for (; i > pwm + skok; i -= skok) {

			TIM1->CCR1 = i;

			HAL_Delay(del);
		}
	}

	TIM1->CCR1 = pwm;
	return 0;

}

uint8_t moveZero(uint16_t zero, uint16_t del, uint16_t skok) {
	int i = 0;
	int pwm = 0;

	if(TIM1->CCR2 == 0)
	{
		for (; i < 725 - skok; i += skok)
		{
			TIM1->CCR2 = i;

			HAL_Delay(del);
		}
	}

	if (zero > 0 && zero < 100) {
		pwm = (int) (zero * 5.05);

	} else if (zero >= 100 && zero < 175) {
		pwm = (int) (zero * 5.6);

	} else {
		return 1;
	}

	pwm += 270;

	// punkt poczatkowy (90stopni) to 670
	i = 0;
	if (i < pwm) {
		for (; i < pwm - skok; i += skok) {

			TIM1->CCR2 = i;

			HAL_Delay(del);

		}

	} else if (i > pwm) {
		for (; i > pwm + skok; i -= skok) {

			TIM1->CCR2 = i;

			HAL_Delay(del);
		}
	}

	TIM1->CCR2 = pwm;
	return 0;

}

uint8_t PozycjaPoczatkowa() {
	moveAlpha(105, 10, 5);
	moveGamma(185, 10, 5);
	moveBeta(70, 10, 5);
//	moveZero(90, 10, 5);

	return 0;
}

//Dodac ograniczenia wynikajace z konstrukcji manipulatora
uint8_t UstawManipulator(int16_t X, int16_t Y, int16_t Z) {
	float alpha = 0;
	float beta = 0;
	float gamma = 0;
	float zero = 0;
	float pom1 = 0;
	float pom2 = 0;

	Z -= L1;

	float r = sqrt(pow(X, 2) + pow(Y, 2));
	float r1 = r - L4 - L6;
	float a = sqrt(pow(r1, 2) + pow(Z, 2));

	beta = acos(
			(float) (pow(L2, 2) + pow(L3, 2) - pow(a, 2))
					/ (float) (2 * L2 * L3));
	pom1 = asin((float) Z / a);
	pom2 = asin((sin(beta) * L2) / a);
	alpha = pom1 + pom2;
	gamma = 2 * M_PI - beta - alpha;

	zero = asin((float) X / r);

	int kat0 = round(zero * 180 / M_PI);
	int kat1 = round(alpha * 180 / M_PI);
	int kat2 = round(beta * 180 / M_PI);
	int kat3 = round(gamma * 180 / M_PI);

	moveZero(kat0, 10, 5);
	moveAlpha(kat1, 10, 5);
	moveBeta(kat2, 10, 5);
	moveGamma(kat3, 10, 5);

	return 0;

}

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  //HAL_UART_RxCpltCallback(&huart1);

//	moveAlpha(0);
//	HAL_Delay(3000);
//	moveAlpha(30);
	//TIM1->CCR2 = 1026;
	//HAL_Delay(1000);

	moveBeta(90, 10, 5);
	HAL_Delay(3000);
	moveBeta(120, 10, 5);
	HAL_Delay(3000);
	moveBeta(90, 10, 5);
		HAL_Delay(3000);
		moveBeta(120, 10, 5);
		HAL_Delay(3000);
		moveBeta(90, 10, 5);
			HAL_Delay(3000);
			moveBeta(120, 10, 5);
			HAL_Delay(3000);
			moveBeta(90, 10, 5);
				HAL_Delay(3000);
				moveBeta(120, 10, 5);
//	HAL_Delay(1500);
	//PozycjaPoczatkowa();
	//HAL_Delay(1500);
	/*UstawManipulator(21, 3, 5);
	HAL_Delay(1500);
	UstawManipulator(20,0,5);*/
	/*int j = 5;
	int prescaler = 5;
	int zmiana = 5;*/
//UstawManipulator(18,3,3);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		/*if(rx_data != '\0')
		{
			switch(rx_data){
			case 'a':
				BTPrint("Aktualna wartosc amplitudy: ");
				BTPrintInt(j);
				BTPrint("\r\nPodaj nowa wartosc amplitudy(0-255): ");
				zmiana = 1;
				if(BTReadInt(&j,0,255))
					BTPrint("\r\n");
				else
					BTPrint("\r\n\r\n");
				break;
			case 'f':
				BTPrint("Aktualna wartosc prescalera: ");
				BTPrintInt(prescaler);
				BTPrint("\r\nPodaj nowa wartosc amplitudy(0-19999): ");
				zmiana = 1;
				if(BTReadInt(&prescaler,0,19999))
					BTPrint("\r\n");
				else
					BTPrint("\r\n\r\n");
				break;
			case 'm':
				BTPrint("Menu:\r\n a) amplituda \r\n f) czestotliwosc \r\n 1) sinus \r\n 2)pila");
				break;
			default:
				BTPrint("Odczytano kod: ");
				BTPrintInt((int)rx_data);
				BTPrint("\r\n");
		}
		rx_data= '\0';
		HAL_UART_Receive_IT(&huart1,(unsigned char*)&rx_data,1);*/
	//}
//		HAL_Delay(2000);
//		moveAlpha(41, 5, 1);
//		HAL_Delay(2000);
//		moveBeta(80, 5, 1);
//		HAL_Delay(2000);
//		moveGamma(239, 5, 1);

//		moveAlpha(90,5,1);
//		HAL_Delay(1500);
//		moveAlpha(60,10,5);
//		HAL_Delay(1500);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
